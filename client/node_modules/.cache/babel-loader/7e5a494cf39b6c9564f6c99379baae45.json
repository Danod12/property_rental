{"ast":null,"code":"var _jsxFileName = \"/Users/danielodriscoll/Web_Development/Final_Project/property_rental/client/src/components/protected_routes/index.jsx\";\nimport React from \"react\";\nimport { Route, Navigate } from \"react-router-dom\"; //the is auth is going to determine whether or not the user can access the route in the component\n// ...rest is pulling any additional prop that we pass to the protected router e.g pathname\n\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nfunction index(_ref) {\n  let {\n    isAuth: isAuth,\n    component: Component,\n    ...rest\n  } = _ref;\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: /*#__PURE__*/_jsxDEV(Route, { ...rest,\n      render: props => {\n        if (isAuth) {\n          return /*#__PURE__*/_jsxDEV(Component, {}, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 12,\n            columnNumber: 20\n          }, this);\n        } else {\n          return /*#__PURE__*/_jsxDEV(Navigate, {\n            to: {\n              pathname: \"/\",\n              state: {\n                from: props.location\n              }\n            }\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 15,\n            columnNumber: 15\n          }, this);\n        }\n      }\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 8,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 7,\n    columnNumber: 5\n  }, this);\n}\n\nexport default index;","map":{"version":3,"names":["React","Route","Navigate","index","isAuth","component","Component","rest","props","pathname","state","from","location"],"sources":["/Users/danielodriscoll/Web_Development/Final_Project/property_rental/client/src/components/protected_routes/index.jsx"],"sourcesContent":["import React from \"react\";\nimport { Route, Navigate } from \"react-router-dom\";\n//the is auth is going to determine whether or not the user can access the route in the component\n// ...rest is pulling any additional prop that we pass to the protected router e.g pathname\nfunction index({ isAuth: isAuth, component: Component, ...rest }) {\n  return (\n    <div>\n      <Route\n        {...rest}\n        render={(props) => {\n          if (isAuth) {\n            return <Component />;\n          } else {\n            return (\n              <Navigate\n                to={{ pathname: \"/\", state: { from: props.location } }}\n              />\n            );\n          }\n        }}\n      />\n    </div>\n  );\n}\n\nexport default index;\n"],"mappings":";AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,SAASC,KAAT,EAAgBC,QAAhB,QAAgC,kBAAhC,C,CACA;AACA;;;;AACA,SAASC,KAAT,OAAkE;EAAA,IAAnD;IAAEC,MAAM,EAAEA,MAAV;IAAkBC,SAAS,EAAEC,SAA7B;IAAwC,GAAGC;EAA3C,CAAmD;EAChE,oBACE;IAAA,uBACE,QAAC,KAAD,OACMA,IADN;MAEE,MAAM,EAAGC,KAAD,IAAW;QACjB,IAAIJ,MAAJ,EAAY;UACV,oBAAO,QAAC,SAAD;YAAA;YAAA;YAAA;UAAA,QAAP;QACD,CAFD,MAEO;UACL,oBACE,QAAC,QAAD;YACE,EAAE,EAAE;cAAEK,QAAQ,EAAE,GAAZ;cAAiBC,KAAK,EAAE;gBAAEC,IAAI,EAAEH,KAAK,CAACI;cAAd;YAAxB;UADN;YAAA;YAAA;YAAA;UAAA,QADF;QAKD;MACF;IAZH;MAAA;MAAA;MAAA;IAAA;EADF;IAAA;IAAA;IAAA;EAAA,QADF;AAkBD;;AAED,eAAeT,KAAf"},"metadata":{},"sourceType":"module"}